{"version":3,"file":"script.js","sourceRoot":"","sources":["../src/script.ts"],"names":[],"mappings":"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","sourcesContent":["import { of, from } from \"rxjs\";\nimport { concatMap, catchError, finalize, mapTo } from \"rxjs/operators\";\n\nimport { HyPushState } from \".\";\n\nfunction cloneScript(script: HTMLScriptElement) {\n  const newScript = document.createElement('script');\n  Array.from(script.attributes).forEach(attr => newScript.setAttributeNode(attr.cloneNode() as Attr));\n  newScript.innerHTML = script.innerHTML;\n  return newScript;\n}\n\nexport class ScriptManager {\n  private parent: HyPushState;\n\n  constructor(parent: HyPushState) {\n    this.parent = parent;\n  }\n\n  get scriptSelector() { return this.parent.scriptSelector }\n\n  removeScriptTags(replaceEls: Element[]) {\n    const scripts: Array<[HTMLScriptElement, HTMLScriptElement]> = [];\n\n    replaceEls.forEach(el => {\n      return el.querySelectorAll(this.scriptSelector).forEach((script: HTMLScriptElement) => {\n        const newScript = cloneScript(script);\n        const pair: [HTMLScriptElement, HTMLScriptElement] = [newScript, script];\n        scripts.push(pair);\n      })\n    });\n\n    return scripts;\n  }\n\n  reinsertScriptTags(context: { scripts: Array<[HTMLScriptElement, HTMLScriptElement]> }) {\n    if (!this.scriptSelector) return Promise.resolve(context);\n\n    const { scripts } = context;\n\n    const originalWrite = document.write;\n\n    return from(scripts).pipe(\n      concatMap(script => this.insertScript(script)),\n      catchError(error => of({ ...context, error })),\n      finalize(() => (document.write = originalWrite)),\n      mapTo(context),\n    )\n      .toPromise();\n  }\n\n  private insertScript([script, ref]: [HTMLScriptElement, HTMLScriptElement]): Promise<{}> {\n    document.write = (...args) => {\n      const temp = document.createElement(\"div\");\n      temp.innerHTML = args.join();\n      Array.from(temp.childNodes).forEach(node => ref.parentNode.insertBefore(node, ref));\n    };\n\n    return new Promise((resolve, reject) => {\n      if (script.src !== \"\") {\n        script.addEventListener(\"load\", resolve);\n        script.addEventListener(\"error\", reject);\n        ref.parentNode.replaceChild(script, ref);\n      } else {\n        ref.parentNode.replaceChild(script, ref);\n        resolve({});\n      }\n    });\n  }\n}"]}