{"version":3,"file":"scroll.js","sourceRoot":"","sources":["../src/scroll.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AAQ/C,MAAM,OAAO,aAAa;IAGxB,YAAY,MAAwC;QAClD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,mBAAmB,IAAI,OAAO,EAAE;YAClC,OAAO,CAAC,iBAAiB,GAAG,QAAQ,CAAC;SACtC;IACH,CAAC;IAED,oBAAoB,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,EAA8B;QACvE,QAAQ,KAAK,EAAE;YACb,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC;gBACf,2BAA2B;gBAC3B,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC;gBACzF,MAAM;aACP;YACD,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC;gBACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAC7B,MAAM;aACP;YACD,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC;gBACf,IAAI,CAAC,6BAA6B,EAAE,CAAC;gBACrC,MAAM;aACP;SACF;IACH,CAAC;IAEO,eAAe,CAAC,IAAY;QAClC,OAAO,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACpE,CAAC;IAEO,kBAAkB,CAAC,IAAY,EAAE,OAAwC;QAC/E,IAAI,IAAI,EAAE;YACR,MAAM,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACtC,IAAI,EAAE;gBAAE,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;SACpC;aAAM;YACL,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;SACtC;IACH,CAAC;IAEO,qBAAqB;QAC3B,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;QAC/B,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAiB,CAAC;QAEpF,IAAI,SAAS,IAAI,IAAI,EAAE;YACrB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;SAC9C;IACH,CAAC;IAEO,6BAA6B;QACnC,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;QAC/B,MAAM,WAAW,GAAG,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC3D,8FAA8F;QAC9F,yGAAyG;QACzG,IAAI,WAAW,IAAI,YAAY,EAAE,KAAK,CAAC,EAAE;YACvC,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC9B;aAAM,IAAI,QAAQ,CAAC,IAAI,EAAE;YACxB,qBAAqB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;SAC3E;IACH,CAAC;CACF;AAAA,CAAC","sourcesContent":["import { getScrollTop, Cause } from \"./common\";\n\ninterface ScrollState {\n  [k: string]: any;\n  scrollTop?: number;\n  scrollHeight?: number;\n}\n\nexport class ScrollManager {\n  private parent: { histId: string } & HTMLElement;\n\n  constructor(parent: { histId: string } & HTMLElement) {\n    this.parent = parent;\n    if ('scrollRestoration' in history) {\n      history.scrollRestoration = 'manual';\n    }\n  }\n\n  manageScrollPosition({ cause, url: { hash } }: { cause: Cause, url: URL }) {\n    switch (cause) {\n      case Cause.Push: {\n        // FIXME: make configurable\n        this.scrollHashIntoView(hash, { behavior: \"smooth\", block: \"start\", inline: \"nearest\" });\n        break;\n      }\n      case Cause.Pop: {\n        this.restoreScrollPosition();\n        break;\n      }\n      case Cause.Init: {\n        this.restoreScrollPositionOnReload();\n        break;\n      }\n    }\n  }\n\n  private elementFromHash(hash: string) {\n    return document.getElementById(decodeURIComponent(hash.substr(1)))\n  }\n\n  private scrollHashIntoView(hash: string, options: boolean | ScrollIntoViewOptions) {\n    if (hash) {\n      const el = this.elementFromHash(hash);\n      if (el) el.scrollIntoView(options);\n    } else {\n      window.scroll(window.pageXOffset, 0);\n    }\n  }\n\n  private restoreScrollPosition() {\n    const { histId } = this.parent;\n    const { scrollTop } = (history.state && history.state[histId]) || {} as ScrollState;\n\n    if (scrollTop != null) {\n      window.scroll(window.pageXOffset, scrollTop);\n    }\n  }\n\n  private restoreScrollPositionOnReload() {\n    const { histId } = this.parent;\n    const scrollState = history.state && history.state[histId];\n    // FIXME: As far as I can tell there is no better way of figuring out if the user has scrolled\n    //        and it doesn't work on hash links b/c the scroll position is going to be non-null by definition\n    if (scrollState && getScrollTop() === 0) {\n      this.restoreScrollPosition();\n    } else if (location.hash) {\n      requestAnimationFrame(() => this.scrollHashIntoView(location.hash, true));\n    }\n  }\n};\n"]}