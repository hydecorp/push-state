{"version":3,"file":"update.js","sourceRoot":"","sources":["../src/update.ts"],"names":[],"mappings":"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","sourcesContent":["import { isExternal, fragmentFromString } from \"./common\";\n\nimport { ScriptManager } from \"./script\";\nimport { rewriteURLs } from \"./rewrite-urls\";\n\nimport { ResponseContext } from './fetch';\nimport { HyPushState } from \".\";\n\nconst CANONICAL_SEL = 'link[rel=canonical]';\nconst META_DESC_SEL = 'meta[name=description]';\n\nexport interface ReplaceContext extends ResponseContext {\n  title: string;\n  document: Document,\n  replaceEls: [Element] | Element[];\n  scripts: Array<[HTMLScriptElement, HTMLScriptElement]>;\n};\n\nexport class UpdateManager {\n  private parent: HyPushState;\n  private scriptManager: ScriptManager;\n\n  constructor(parent: HyPushState) {\n    this.parent = parent;\n    this.scriptManager = new ScriptManager(parent);\n  }\n\n  get el() { return this.parent.el; }\n  get replaceSelector() { return this.parent.replaceSelector; }\n  get scriptSelector() { return this.parent.scriptSelector; }\n\n  // Extracts the elements to be replaced\n  private getReplaceElements(doc: Document): Element[] {\n    if (this.replaceSelector) {\n      return this.replaceSelector.split(',').map(sel => doc.querySelector(sel));\n    } else if (this.el.id) {\n      return [doc.getElementById(this.el.id)];\n    } else {\n      const index = Array.from(document.getElementsByTagName(this.el.tagName)).indexOf(this.el);\n      return [doc.getElementsByTagName(this.el.tagName)[index]];\n    }\n  }\n\n  // Takes the response string and turns it into document fragments\n  // that can be inserted into the DOM.\n  responseToContent(context: ResponseContext): ReplaceContext {\n    try {\n      const { responseText } = context;\n\n      const doc = new DOMParser().parseFromString(responseText, 'text/html');\n\n      const { title = '' } = doc;\n      const replaceEls = this.getReplaceElements(doc);\n\n      // if (replaceEls.some(x => x == null)) {\n      //   throw { ...context, replaceElMissing: true };\n      // }\n\n      const scripts = this.scriptSelector\n        ? this.scriptManager.removeScriptTags(replaceEls)\n        : [];\n\n      return { ...context, document: doc, title, replaceEls, scripts };\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  // Replaces the old elments with the new one, one-by-one.\n  private replaceContentWithSelector(elements: Element[]) {\n    this.replaceSelector\n      .split(',')\n      .map(sel => document.querySelector(sel))\n      .forEach((oldElement, i) => oldElement.parentNode.replaceChild(elements[i], oldElement));\n  }\n\n  // When no `relaceIds` are set, replace the entire content of the component (slow).\n  private replaceContentWholesale([el]: [Element]) {\n    this.el.innerHTML = el.innerHTML;\n  }\n\n  private replaceContent(replaceEls: Element[]) {\n    if (this.replaceSelector) {\n      this.replaceContentWithSelector(replaceEls);\n    } else {\n      this.replaceContentWholesale(replaceEls as [Element]);\n    }\n  }\n\n  private replaceHead(doc: Document)  {\n    const { head } = this.el.ownerDocument;\n\n    const canonicalEl = head.querySelector(CANONICAL_SEL) as HTMLLinkElement|null;\n    const cEl = doc.head.querySelector(CANONICAL_SEL) as HTMLLinkElement|null;\n    if (canonicalEl && cEl) canonicalEl.href = cEl.href;\n\n    const metaDescEl = head.querySelector(META_DESC_SEL) as HTMLMetaElement|null;\n    const mEl = doc.head.querySelector(META_DESC_SEL) as HTMLMetaElement|null;\n    if (metaDescEl && mEl) metaDescEl.content = mEl.content;\n  }\n\n  updateDOM(context: ReplaceContext) {\n    try {\n      const { replaceEls, document } = context;\n      if (isExternal(this.parent)) rewriteURLs(replaceEls, this.parent.href);\n      this.replaceContent(replaceEls);\n      this.replaceHead(document)\n    } catch (error) {\n      throw { ...context, error };\n    }\n  }\n\n  reinsertScriptTags(context: { scripts: Array<[HTMLScriptElement, HTMLScriptElement]> }) {\n    return this.scriptManager.reinsertScriptTags(context);\n  }\n}\n"]}